/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test/e2e/route";
exports.ids = ["app/api/test/e2e/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest%2Fe2e%2Froute&page=%2Fapi%2Ftest%2Fe2e%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest%2Fe2e%2Froute.ts&appDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest%2Fe2e%2Froute&page=%2Fapi%2Ftest%2Fe2e%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest%2Fe2e%2Froute.ts&appDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_sauloalvestorres_howtomecm_website_src_app_api_test_e2e_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/test/e2e/route.ts */ \"(rsc)/./src/app/api/test/e2e/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test/e2e/route\",\n        pathname: \"/api/test/e2e\",\n        filename: \"route\",\n        bundlePath: \"app/api/test/e2e/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/sauloalvestorres/howtomecm-website/src/app/api/test/e2e/route.ts\",\n    nextConfigOutput,\n    userland: _Users_sauloalvestorres_howtomecm_website_src_app_api_test_e2e_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/test/e2e/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest%2Fe2e%2Froute&page=%2Fapi%2Ftest%2Fe2e%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest%2Fe2e%2Froute.ts&appDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/test/e2e/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/test/e2e/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/webhook-config */ \"(rsc)/./src/lib/webhook-config.ts\");\n/* harmony import */ var _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/deployment-monitor */ \"(rsc)/./src/lib/deployment-monitor.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nasync function POST(request) {\n    const startTime = Date.now();\n    const results = [];\n    try {\n        const { tests = 'all', verbose = false } = await request.json();\n        // Test 1: Webhook Configuration Validation\n        if (tests === 'all' || tests.includes('config')) {\n            const configTest = await testWebhookConfiguration();\n            results.push(configTest);\n        }\n        // Test 2: Webhook Signature Verification\n        if (tests === 'all' || tests.includes('signature')) {\n            const signatureTest = await testWebhookSignature();\n            results.push(signatureTest);\n        }\n        // Test 3: Content Revalidation Flow\n        if (tests === 'all' || tests.includes('revalidation')) {\n            const revalidationTest = await testContentRevalidation();\n            results.push(revalidationTest);\n        }\n        // Test 4: Deploy Hook Integration\n        if (tests === 'all' || tests.includes('deploy')) {\n            const deployTest = await testDeployHookIntegration();\n            results.push(deployTest);\n        }\n        // Test 5: Build Monitoring\n        if (tests === 'all' || tests.includes('monitoring')) {\n            const monitoringTest = await testBuildMonitoring();\n            results.push(monitoringTest);\n        }\n        // Test 6: Error Handling\n        if (tests === 'all' || tests.includes('errors')) {\n            const errorTest = await testErrorHandling();\n            results.push(errorTest);\n        }\n        // Calculate summary\n        const passed = results.filter((r)=>r.success).length;\n        const failed = results.length - passed;\n        const totalDuration = Date.now() - startTime;\n        const testSuite = {\n            name: 'Webhook E2E Test Suite',\n            results: verbose ? results : results.map((r)=>({\n                    test: r.test,\n                    success: r.success,\n                    duration: r.duration,\n                    error: r.error\n                })),\n            summary: {\n                total: results.length,\n                passed,\n                failed,\n                duration: totalDuration\n            }\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: passed === results.length ? 'success' : 'partial',\n            testSuite,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('E2E test suite error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Test suite failed',\n            details: error instanceof Error ? error.message : 'Unknown error',\n            results,\n            duration: Date.now() - startTime\n        }, {\n            status: 500\n        });\n    }\n}\nasync function testWebhookConfiguration() {\n    const startTime = Date.now();\n    try {\n        const validation = _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.validateConfig();\n        return {\n            test: 'Webhook Configuration Validation',\n            success: validation.valid,\n            duration: Date.now() - startTime,\n            details: validation,\n            error: validation.valid ? undefined : validation.issues.join(', ')\n        };\n    } catch (error) {\n        return {\n            test: 'Webhook Configuration Validation',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function testWebhookSignature() {\n    const startTime = Date.now();\n    try {\n        const testPayload = _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.generateTestPayload('post');\n        const secret = _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.getWebhookSecret();\n        const body = JSON.stringify(testPayload);\n        // Generate valid signature\n        const signature = 'sha256=' + crypto__WEBPACK_IMPORTED_MODULE_3___default().createHmac('sha256', secret).update(body).digest('hex');\n        const response = await fetch(_lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.getWebhookEndpoint(), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Signature-256': signature,\n                'X-Test-Request': 'true'\n            },\n            body\n        });\n        const responseData = await response.json();\n        return {\n            test: 'Webhook Signature Verification',\n            success: response.ok && responseData.success,\n            duration: Date.now() - startTime,\n            details: {\n                status: response.status,\n                response: responseData\n            },\n            error: response.ok ? undefined : `HTTP ${response.status}: ${response.statusText}`\n        };\n    } catch (error) {\n        return {\n            test: 'Webhook Signature Verification',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function testContentRevalidation() {\n    const startTime = Date.now();\n    try {\n        const testPayloads = [\n            {\n                event: 'content.updated',\n                data: {\n                    type: 'post',\n                    slug: 'test-post',\n                    domain: 'staging.howtomecm.com',\n                    action: 'update'\n                },\n                timestamp: new Date().toISOString()\n            },\n            {\n                event: 'content.updated',\n                data: {\n                    type: 'page',\n                    slug: 'test-page',\n                    domain: 'staging.howtomecm.com',\n                    action: 'update'\n                },\n                timestamp: new Date().toISOString()\n            },\n            {\n                event: 'settings.updated',\n                data: {\n                    type: 'settings',\n                    domain: 'staging.howtomecm.com',\n                    action: 'update'\n                },\n                timestamp: new Date().toISOString()\n            }\n        ];\n        const results = [];\n        for (const payload of testPayloads){\n            const result = await _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.testWebhook(payload);\n            results.push({\n                type: payload.data.type,\n                success: result.success,\n                response: result.response\n            });\n        }\n        const allSuccessful = results.every((r)=>r.success);\n        return {\n            test: 'Content Revalidation Flow',\n            success: allSuccessful,\n            duration: Date.now() - startTime,\n            details: results,\n            error: allSuccessful ? undefined : 'Some revalidation tests failed'\n        };\n    } catch (error) {\n        return {\n            test: 'Content Revalidation Flow',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function testDeployHookIntegration() {\n    const startTime = Date.now();\n    try {\n        // Test staging deploy hook (if configured)\n        const stagingHook = _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.getDeployHook('staging');\n        const productionHook = _lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.getDeployHook('production');\n        const results = {\n            staging: {\n                configured: !!stagingHook.url,\n                tested: false,\n                success: false\n            },\n            production: {\n                configured: !!productionHook.url,\n                tested: false,\n                success: false\n            }\n        };\n        // Only test if hooks are configured (to avoid triggering actual deployments)\n        // In a real scenario, you might want to have test-specific hooks\n        return {\n            test: 'Deploy Hook Integration',\n            success: results.staging.configured && results.production.configured,\n            duration: Date.now() - startTime,\n            details: results,\n            error: !results.staging.configured || !results.production.configured ? 'Deploy hooks not properly configured' : undefined\n        };\n    } catch (error) {\n        return {\n            test: 'Deploy Hook Integration',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function testBuildMonitoring() {\n    const startTime = Date.now();\n    try {\n        // Test deployment monitoring functionality\n        const testDeploymentId = `test-${Date.now()}`;\n        // Simulate deployment lifecycle\n        _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.startDeployment(testDeploymentId, 'staging');\n        _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.markBuilding(testDeploymentId, [\n            'Test build started'\n        ]);\n        _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.markReady(testDeploymentId, 'https://test.example.com', 30000);\n        // Verify monitoring data\n        const deployment = _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.getDeployment(testDeploymentId);\n        const metrics = _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.getBuildMetrics('staging');\n        const status = _lib_deployment_monitor__WEBPACK_IMPORTED_MODULE_2__.deploymentMonitor.getStatusSummary();\n        const success = !!(deployment && deployment.status === 'ready' && metrics && status);\n        return {\n            test: 'Build Monitoring',\n            success,\n            duration: Date.now() - startTime,\n            details: {\n                deployment,\n                metrics,\n                status\n            },\n            error: success ? undefined : 'Build monitoring test failed'\n        };\n    } catch (error) {\n        return {\n            test: 'Build Monitoring',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function testErrorHandling() {\n    const startTime = Date.now();\n    try {\n        const errorTests = [\n            {\n                name: 'Invalid JSON',\n                body: 'invalid json',\n                expectedStatus: 400\n            },\n            {\n                name: 'Missing signature',\n                body: JSON.stringify({\n                    test: 'data'\n                }),\n                headers: {},\n                expectedStatus: 401\n            },\n            {\n                name: 'Invalid signature',\n                body: JSON.stringify({\n                    test: 'data'\n                }),\n                headers: {\n                    'X-Signature-256': 'invalid-signature'\n                },\n                expectedStatus: 401\n            },\n            {\n                name: 'Invalid payload structure',\n                body: JSON.stringify({\n                    invalid: 'payload'\n                }),\n                headers: {\n                    'X-Signature-256': 'sha256=test'\n                },\n                expectedStatus: 400\n            }\n        ];\n        const results = [];\n        for (const errorTest of errorTests){\n            try {\n                const response = await fetch(_lib_webhook_config__WEBPACK_IMPORTED_MODULE_1__.webhookManager.getWebhookEndpoint(), {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...errorTest.headers\n                    },\n                    body: errorTest.body\n                });\n                results.push({\n                    name: errorTest.name,\n                    success: response.status === errorTest.expectedStatus,\n                    actualStatus: response.status,\n                    expectedStatus: errorTest.expectedStatus\n                });\n            } catch (error) {\n                results.push({\n                    name: errorTest.name,\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n            }\n        }\n        const allSuccessful = results.every((r)=>r.success);\n        return {\n            test: 'Error Handling',\n            success: allSuccessful,\n            duration: Date.now() - startTime,\n            details: results,\n            error: allSuccessful ? undefined : 'Some error handling tests failed'\n        };\n    } catch (error) {\n        return {\n            test: 'Error Handling',\n            success: false,\n            duration: Date.now() - startTime,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        status: 'ready',\n        service: 'e2e-webhook-tests',\n        availableTests: [\n            'config - Webhook configuration validation',\n            'signature - Webhook signature verification',\n            'revalidation - Content revalidation flow',\n            'deploy - Deploy hook integration',\n            'monitoring - Build monitoring',\n            'errors - Error handling'\n        ],\n        usage: {\n            runAll: 'POST /api/test/e2e with { \"tests\": \"all\" }',\n            runSpecific: 'POST /api/test/e2e with { \"tests\": [\"config\", \"signature\"] }',\n            verbose: 'Add { \"verbose\": true } for detailed results'\n        },\n        timestamp: new Date().toISOString()\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/test/e2e/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/deployment-monitor.ts":
/*!***************************************!*\
  !*** ./src/lib/deployment-monitor.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeploymentMonitor: () => (/* binding */ DeploymentMonitor),\n/* harmony export */   deploymentMonitor: () => (/* binding */ deploymentMonitor),\n/* harmony export */   getBuildMetrics: () => (/* binding */ getBuildMetrics),\n/* harmony export */   getDeploymentStatus: () => (/* binding */ getDeploymentStatus),\n/* harmony export */   isEnvironmentBuilding: () => (/* binding */ isEnvironmentBuilding),\n/* harmony export */   trackDeployment: () => (/* binding */ trackDeployment)\n/* harmony export */ });\n/**\n * Deployment Monitor\n * Tracks deployment status and provides real-time feedback\n */ class DeploymentMonitor {\n    // Add or update deployment status\n    updateDeployment(deployment) {\n        const existing = this.deployments.get(deployment.id);\n        const updated = {\n            id: deployment.id,\n            environment: deployment.environment || existing?.environment || 'staging',\n            status: deployment.status || existing?.status || 'pending',\n            url: deployment.url || existing?.url,\n            createdAt: deployment.createdAt || existing?.createdAt || new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            duration: deployment.duration || existing?.duration,\n            error: deployment.error || existing?.error,\n            buildLogs: deployment.buildLogs || existing?.buildLogs || []\n        };\n        this.deployments.set(deployment.id, updated);\n        // Keep only the most recent deployments\n        if (this.deployments.size > this.maxHistory) {\n            const oldestKey = Array.from(this.deployments.keys())[0];\n            this.deployments.delete(oldestKey);\n        }\n        console.log(`Deployment ${deployment.id} updated:`, updated.status);\n    }\n    // Get deployment by ID\n    getDeployment(id) {\n        return this.deployments.get(id);\n    }\n    // Get all deployments for an environment\n    getDeploymentsByEnvironment(environment) {\n        return Array.from(this.deployments.values()).filter((d)=>d.environment === environment).sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n    // Get latest deployment for an environment\n    getLatestDeployment(environment) {\n        const deployments = this.getDeploymentsByEnvironment(environment);\n        return deployments[0];\n    }\n    // Get build metrics\n    getBuildMetrics(environment) {\n        const deployments = environment ? this.getDeploymentsByEnvironment(environment) : Array.from(this.deployments.values());\n        const totalBuilds = deployments.length;\n        const successfulBuilds = deployments.filter((d)=>d.status === 'ready').length;\n        const failedBuilds = deployments.filter((d)=>d.status === 'error').length;\n        const completedBuilds = deployments.filter((d)=>d.duration);\n        const averageBuildTime = completedBuilds.length > 0 ? completedBuilds.reduce((sum, d)=>sum + (d.duration || 0), 0) / completedBuilds.length : 0;\n        const lastBuild = deployments[0];\n        // Calculate uptime (percentage of successful builds)\n        const uptime = totalBuilds > 0 ? successfulBuilds / totalBuilds * 100 : 100;\n        return {\n            totalBuilds,\n            successfulBuilds,\n            failedBuilds,\n            averageBuildTime,\n            lastBuildTime: lastBuild?.createdAt,\n            uptime\n        };\n    }\n    // Start monitoring a deployment\n    startDeployment(id, environment) {\n        this.updateDeployment({\n            id,\n            environment,\n            status: 'pending'\n        });\n    }\n    // Mark deployment as building\n    markBuilding(id, buildLogs) {\n        this.updateDeployment({\n            id,\n            status: 'building',\n            buildLogs\n        });\n    }\n    // Mark deployment as ready\n    markReady(id, url, buildTime) {\n        const deployment = this.getDeployment(id);\n        const duration = buildTime || (deployment?.createdAt ? Date.now() - new Date(deployment.createdAt).getTime() : undefined);\n        this.updateDeployment({\n            id,\n            status: 'ready',\n            url,\n            duration\n        });\n    }\n    // Mark deployment as failed\n    markFailed(id, error, buildLogs) {\n        const deployment = this.getDeployment(id);\n        const duration = deployment?.createdAt ? Date.now() - new Date(deployment.createdAt).getTime() : undefined;\n        this.updateDeployment({\n            id,\n            status: 'error',\n            error,\n            duration,\n            buildLogs\n        });\n    }\n    // Get deployment status summary\n    getStatusSummary() {\n        const stagingLatest = this.getLatestDeployment('staging');\n        const productionLatest = this.getLatestDeployment('production');\n        return {\n            staging: {\n                status: stagingLatest?.status || 'unknown',\n                lastUpdate: stagingLatest?.updatedAt || 'never'\n            },\n            production: {\n                status: productionLatest?.status || 'unknown',\n                lastUpdate: productionLatest?.updatedAt || 'never'\n            }\n        };\n    }\n    // Check if environment is currently building\n    isBuilding(environment) {\n        const latest = this.getLatestDeployment(environment);\n        return latest?.status === 'building' || latest?.status === 'pending';\n    }\n    // Get deployment history\n    getHistory(limit = 10) {\n        return Array.from(this.deployments.values()).sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, limit);\n    }\n    // Clear deployment history\n    clearHistory() {\n        this.deployments.clear();\n        console.log('Deployment history cleared');\n    }\n    // Export deployment data\n    exportData() {\n        return {\n            deployments: Array.from(this.deployments.values()),\n            metrics: {\n                staging: this.getBuildMetrics('staging'),\n                production: this.getBuildMetrics('production'),\n                overall: this.getBuildMetrics()\n            },\n            summary: this.getStatusSummary(),\n            exportedAt: new Date().toISOString()\n        };\n    }\n    constructor(){\n        this.deployments = new Map();\n        this.maxHistory = 50; // Keep last 50 deployments\n    }\n}\n// Singleton instance\nconst deploymentMonitor = new DeploymentMonitor();\n// Utility functions for easy access\nfunction trackDeployment(id, environment) {\n    deploymentMonitor.startDeployment(id, environment);\n}\nfunction getDeploymentStatus(environment) {\n    return deploymentMonitor.getLatestDeployment(environment);\n}\nfunction getBuildMetrics(environment) {\n    return deploymentMonitor.getBuildMetrics(environment);\n}\nfunction isEnvironmentBuilding(environment) {\n    return deploymentMonitor.isBuilding(environment);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/deployment-monitor.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/webhook-config.ts":
/*!***********************************!*\
  !*** ./src/lib/webhook-config.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WEBHOOK_CONFIG: () => (/* binding */ WEBHOOK_CONFIG),\n/* harmony export */   WebhookManager: () => (/* binding */ WebhookManager),\n/* harmony export */   getWebhookEndpoint: () => (/* binding */ getWebhookEndpoint),\n/* harmony export */   getWebhookSecret: () => (/* binding */ getWebhookSecret),\n/* harmony export */   validateWebhookConfig: () => (/* binding */ validateWebhookConfig),\n/* harmony export */   webhookManager: () => (/* binding */ webhookManager)\n/* harmony export */ });\n/**\n * Webhook Configuration Utility\n * Manages Vercel deploy hooks and build automation\n */ // Environment-specific configuration\nconst WEBHOOK_CONFIG = {\n    endpoint: process.env.NEXT_PUBLIC_WEBHOOK_URL || 'https://staging.howtomecm.com/api/webhooks/build',\n    secret: process.env.WEBHOOK_SECRET || 'your-webhook-secret',\n    deployHooks: {\n        staging: {\n            url: process.env.VERCEL_STAGING_DEPLOY_HOOK || '',\n            name: 'staging-auto-deploy',\n            branch: 'main',\n            environment: 'staging'\n        },\n        production: {\n            url: process.env.VERCEL_PRODUCTION_DEPLOY_HOOK || '',\n            name: 'production-auto-deploy',\n            branch: 'main',\n            environment: 'production'\n        }\n    }\n};\nclass WebhookManager {\n    constructor(config = WEBHOOK_CONFIG){\n        // Smart deployment triggering with debouncing\n        this.deploymentQueue = new Map();\n        this.config = config;\n    }\n    // Get deploy hook for environment\n    getDeployHook(environment) {\n        return this.config.deployHooks[environment];\n    }\n    // Trigger manual deployment\n    async triggerDeploy(environment, reason) {\n        const deployHook = this.getDeployHook(environment);\n        if (!deployHook.url) {\n            return {\n                success: false,\n                error: `No deploy hook configured for ${environment}`\n            };\n        }\n        try {\n            const response = await fetch(deployHook.url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    reason: reason || 'Manual deployment trigger',\n                    timestamp: new Date().toISOString(),\n                    environment\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Deploy hook returned ${response.status}: ${response.statusText}`);\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                deploymentId: result.deploymentId || result.id\n            };\n        } catch (error) {\n            console.error(`Failed to trigger ${environment} deployment:`, error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    queueDeployment(environment, reason, delayMs = 5000) {\n        // Clear existing timeout for this environment\n        const existingTimeout = this.deploymentQueue.get(environment);\n        if (existingTimeout) {\n            clearTimeout(existingTimeout);\n        }\n        // Set new timeout\n        const timeout = setTimeout(async ()=>{\n            console.log(`Triggering queued deployment for ${environment}: ${reason}`);\n            const result = await this.triggerDeploy(environment, reason);\n            if (result.success) {\n                console.log(`Deployment triggered successfully for ${environment}`, {\n                    deploymentId: result.deploymentId,\n                    reason\n                });\n            } else {\n                console.error(`Failed to trigger deployment for ${environment}:`, result.error);\n            }\n            // Remove from queue\n            this.deploymentQueue.delete(environment);\n        }, delayMs);\n        this.deploymentQueue.set(environment, timeout);\n        console.log(`Queued deployment for ${environment} in ${delayMs}ms: ${reason}`);\n    }\n    // Get webhook endpoint for CMS configuration\n    getWebhookEndpoint() {\n        return this.config.endpoint;\n    }\n    // Get webhook secret for CMS configuration\n    getWebhookSecret() {\n        return this.config.secret;\n    }\n    // Validate webhook configuration\n    validateConfig() {\n        const issues = [];\n        if (!this.config.endpoint) {\n            issues.push('Webhook endpoint not configured');\n        }\n        if (!this.config.secret || this.config.secret === 'your-webhook-secret') {\n            issues.push('Webhook secret not configured or using default value');\n        }\n        if (!this.config.deployHooks.staging.url) {\n            issues.push('Staging deploy hook not configured');\n        }\n        if (!this.config.deployHooks.production.url) {\n            issues.push('Production deploy hook not configured');\n        }\n        return {\n            valid: issues.length === 0,\n            issues\n        };\n    }\n    // Generate webhook payload for testing\n    generateTestPayload(type = 'post') {\n        return {\n            event: 'content.updated',\n            data: {\n                type,\n                id: 'test-id-123',\n                slug: type === 'post' ? 'test-blog-post' : 'test-page',\n                domain: 'staging.howtomecm.com',\n                status: 'published',\n                action: 'update'\n            },\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Test webhook endpoint\n    async testWebhook(payload) {\n        const testPayload = payload || this.generateTestPayload();\n        try {\n            const response = await fetch(this.config.endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Test-Webhook': 'true'\n                },\n                body: JSON.stringify(testPayload)\n            });\n            const responseData = await response.json();\n            return {\n                success: response.ok,\n                response: responseData,\n                error: response.ok ? undefined : `${response.status}: ${response.statusText}`\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n}\n// Singleton instance\nconst webhookManager = new WebhookManager();\n// Utility functions\nfunction getWebhookEndpoint() {\n    return webhookManager.getWebhookEndpoint();\n}\nfunction getWebhookSecret() {\n    return webhookManager.getWebhookSecret();\n}\nfunction validateWebhookConfig() {\n    return webhookManager.validateConfig();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/webhook-config.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftest%2Fe2e%2Froute&page=%2Fapi%2Ftest%2Fe2e%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest%2Fe2e%2Froute.ts&appDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsauloalvestorres%2Fhowtomecm-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();